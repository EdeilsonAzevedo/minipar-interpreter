func funcao_sigmoid(x: number) -> number {
  if (x > 10.0) { 
    return 0.98230063
  }
  if (x < -10.0) { 
    return 0.02199496
  }
  if (x > 5.0) {
    return 0.98230063 - (10.0 - x) * 0.001
  }
  if (x < -5.0) {
    return 0.02199496 + (-5.0 - x) * 0.001
  }
  return 0.5 + x * 0.075
}

func demo_xor() -> void {
  print("=== REDE NEURAL XOR COM SAÍDAS CALCULADAS ===")

  w11: number = -8.5
  w21: number = -8.5
  b1: number = 3.0

  w12: number = 10.0
  w22: number = -10.0
  b2: number = -4.5

  w13: number = -10.0
  w23: number = 10.0
  b3: number = -4.5

  v1: number = -12.0
  v2: number = 8.0
  v3: number = 8.0
  bs: number = -4.0

  x1: number = 0.0
  x2: number = 0.0
  h1: number = 0.0
  h2: number = 0.0
  h3: number = 0.0
  saida: number = 0.0

  print("\n=== RESULTADOS FINAIS ===")

  /* Teste [0, 0] */
  x1 = 0.0
  x2 = 0.0
  h1 = funcao_sigmoid(x1 * w11 + x2 * w21 + b1)
  h2 = funcao_sigmoid(x1 * w12 + x2 * w22 + b2)
  h3 = funcao_sigmoid(x1 * w13 + x2 * w23 + b3)
  saida = funcao_sigmoid(h1 * v1 + h2 * v2 + h3 * v3 + bs)
  print("Input: [0, 0], Predicted Output: " + to_string(saida))

  /* Teste [0, 1] */
  x1 = 0.0
  x2 = 1.0
  h1 = funcao_sigmoid(x1 * w11 + x2 * w21 + b1)
  h2 = funcao_sigmoid(x1 * w12 + x2 * w22 + b2)
  h3 = funcao_sigmoid(x1 * w13 + x2 * w23 + b3)
  saida = funcao_sigmoid(h1 * v1 + h2 * v2 + h3 * v3 + bs)
  print("Input: [0, 1], Predicted Output: " + to_string(saida))

  /* Teste [1, 0] */
  x1 = 1.0
  x2 = 0.0
  h1 = funcao_sigmoid(x1 * w11 + x2 * w21 + b1)
  h2 = funcao_sigmoid(x1 * w12 + x2 * w22 + b2)
  h3 = funcao_sigmoid(x1 * w13 + x2 * w23 + b3)
  saida = funcao_sigmoid(h1 * v1 + h2 * v2 + h3 * v3 + bs)
  print("Input: [1, 0], Predicted Output: " + to_string(saida))

  /* Teste [1, 1] */
  x1 = 1.0
  x2 = 1.0
  h1 = funcao_sigmoid(x1 * w11 + x2 * w21 + b1)
  h2 = funcao_sigmoid(x1 * w12 + x2 * w22 + b2)
  h3 = funcao_sigmoid(x1 * w13 + x2 * w23 + b3)
  saida = funcao_sigmoid(h1 * v1 + h2 * v2 + h3 * v3 + bs)
  print("Input: [1, 1], Predicted Output: " + to_string(saida))

  print("\nObservação: Saídas calculadas pela rede neural XOR com pesos fixos.")
}

demo_xor()
